# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    - name: Deploy HelmFile
  # You may pin to the exact commit or the version.
  # uses: cloudposse/github-action-deploy-helmfile@e5396120c8d09d826889c286a3c7e27fa17f3f15
uses: cloudposse/github-action-deploy-helmfile@0.5.0
  with:
    # Cluster name
    cluster: 
    # AWS region
    aws-region: # optional, default is us-east-1
    # The path where lives the helmfile.
    helmfile-path: # optional, default is deploy
    # Helmfile name
    helmfile: # optional, default is helmfile.yaml
    # Operation with helmfiles. (valid options - `deploy`, `destroy`)
    operation: # default is deploy
    # Helmfile environment
    environment: # optional, default is preview
    # Git SHA
    gitref-sha: # optional, default is 
    # Kubernetes namespace
    namespace: 
    # Docker image
    image: 
    # Docker image tag
    image-tag: 
    # Debug mode
    debug: # optional, default is false
    # The name of the label used to describe the helm release
    release_label_name: # optional, default is release
    # YAML string with extra values to use in a helmfile deploy
    values_yaml: # optional
    # Helm version
    helm_version: # optional, default is 3.11.1
    # Helmfile version
    helmfile_version: # optional, default is 0.143.5
    # Kubectl version
    kubectl_version: # optional, default is 1.26.3
    # Kubectl version
    chamber_version: # optional, default is 2.11.1
    - name: Rational Test Automation Server GitHub Action
  # You may pin to the exact commit or the version.
  # uses: IBM/devopsauto-testserver-actions@c704855bdbbae4f0df152919d00fb0bd40f67ee0
  uses: IBM/devopsauto-testserver-actions@v1
  with:
    # Rational Test Automation Server URL
    serverUrl: 
    # Rational Test Automation Server Offline Token
    offlineToken: 
    # Team Space name
    teamspace: 
    # Project name
    project: 
    # Branch name in which the test exists
    branch: 
    # AssetId of the test in Rational Test Automation Server.
    assetId: 
    # Optional. Test environment corresponding to the test. Mandatory to input the value if you want to run API test.
    environment: # optional
    # Optional. Comma (,) delimited values of datasets for the job to run, For example: source:replacement;source:replacement
    datasets: # optionaloptional
    # Optional. Variables corresponding to the test. You must enter the variables in the format: name_of_the_variable=value_of_the_variable
    variables: # optional
    # Optional. Labels corresponding to the test. For example: label1, label2
    labels: # optional
    # Optional. Secrets collection name for the job to run.
    secretsCollection: # 
